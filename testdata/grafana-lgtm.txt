Grafana LGTM
Since testcontainers-go  v0.33.0

Introduction
The Testcontainers module for Grafana LGTM.

Adding this module to your project dependencies
Please run the following command to add the Grafana module to your Go dependencies:

go get github.com/testcontainers/testcontainers-go/modules/grafanalgtm
Usage example

Creating a Grafana LGTM container
ctx := context.Background()

grafanaLgtmContainer, err := grafanalgtm.Run(ctx, "grafana/otel-lgtm:0.6.0")
if err != nil {
    golog.Fatalf("failed to start container: %s", err)
}

// Clean up the container
defer func() {
    if err := grafanaLgtmContainer.Terminate(ctx); err != nil {
        golog.Fatalf("failed to terminate container: %s", err) // nolint:gocritic
    }
}()

Module Reference
Run function
Since testcontainers-go  v0.33.0
Info

The RunContainer(ctx, opts...) function is deprecated and will be removed in the next major release of Testcontainers for Go.

The Grafana LGTM module exposes one entrypoint function to create the Grafana LGTM container, and this function receives three parameters:

func Run(ctx context.Context, img string, opts ...testcontainers.ContainerCustomizer) (*GrafanaLGTMContainer, error)
context.Context, the Go context.
string, the Docker image to use.
testcontainers.ContainerCustomizer, a variadic argument for passing options.
Container Options
When starting the Grafana LGTM container, you can pass options in a variadic way to configure it.

Image
If you need to set a different Grafana LGTM Docker image, you can set a valid Docker image as the second argument in the Run function. E.g. Run(context.Background(), "grafana/otel-lgtm:0.6.0").

Admin Credentials
Since testcontainers-go  v0.33.0
If you need to set different admin credentials in the Grafana LGTM container, you can set them using the WithAdminCredentials(user, password) option.

Image Substitutions
Since testcontainers-go  v0.26.0
In more locked down / secured environments, it can be problematic to pull images from Docker Hub and run them without additional precautions.

An image name substitutor converts a Docker image name, as may be specified in code, to an alternative name. This is intended to provide a way to override image names, for example to enforce pulling of images from a private registry.

Testcontainers for Go exposes an interface to perform this operations: ImageSubstitutor, and a No-operation implementation to be used as reference for custom implementations:


Image Substitutor Interface
Noop Image Substitutor
// ImageSubstitutor represents a way to substitute container image names
type ImageSubstitutor interface {
    // Description returns the name of the type and a short description of how it modifies the image.
    // Useful to be printed in logs
    Description() string
    Substitute(image string) (string, error)
}

Using the WithImageSubstitutors options, you could define your own substitutions to the container images. E.g. adding a prefix to the images so that they can be pulled from a Docker registry other than Docker Hub. This is the usual mechanism for using Docker image proxies, caches, etc.

WithEnv
Since testcontainers-go  v0.29.0
If you need to either pass additional environment variables to a container or override them, you can use testcontainers.WithEnv for example:

postgres, err = postgresModule.Run(ctx, "postgres:15-alpine", testcontainers.WithEnv(map[string]string{"POSTGRES_INITDB_ARGS": "--no-sync"}))
WithHostPortAccess
Since testcontainers-go  v0.31.0
If you need to access a port that is already running in the host, you can use testcontainers.WithHostPortAccess for example:

postgres, err = postgresModule.Run(ctx, "postgres:15-alpine", testcontainers.WithHostPortAccess(8080))
To understand more about this feature, please read the Exposing host ports to the container documentation.

WithLogConsumers
Since testcontainers-go  v0.28.0
If you need to consume the logs of the container, you can use testcontainers.WithLogConsumers with a valid log consumer. An example of a log consumer is the following:

type TestLogConsumer struct {
    Msgs []string
}

func (g *TestLogConsumer) Accept(l Log) {
    g.Msgs = append(g.Msgs, string(l.Content))
}
WithLogger
Since testcontainers-go  v0.29.0
If you need to either pass logger to a container, you can use testcontainers.WithLogger.

Info

Consider calling this before other "With" functions as these may generate logs.

In this example we also use TestLogger which writes to the passed in testing.TB using Logf. The result is that we capture all logging from the container into the test context meaning its hidden behind go test -v and is associated with the relevant test, providing the user with useful context instead of appearing out of band.

func TestHandler(t *testing.T) {
    logger := TestLogger(t)
    _, err := postgresModule.Run(ctx, "postgres:15-alpine", testcontainers.WithLogger(logger))
    require.NoError(t, err)
    // Do something with container.
}
Please read the Following Container Logs documentation for more information about creating log consumers.

Wait Strategies
If you need to set a different wait strategy for the container, you can use testcontainers.WithWaitStrategy with a valid wait strategy.

Info

The default deadline for the wait strategy is 60 seconds.

At the same time, it's possible to set a wait strategy and a custom deadline with testcontainers.WithWaitStrategyAndDeadline.

Startup Commands
Since testcontainers-go  v0.25.0
Testcontainers exposes the WithStartupCommand(e ...Executable) option to run arbitrary commands in the container right after it's started.

Info

To better understand how this feature works, please read the Create containers: Lifecycle Hooks documentation.

It also exports an Executable interface, defining the following methods:

AsCommand(), which returns a slice of strings to represent the command and positional arguments to be executed in the container;
Options(), which returns the slice of functional options with the Docker's ExecConfigs used to create the command in the container (the working directory, environment variables, user executing the command, etc) and the possible output format (Multiplexed).
You could use this feature to run a custom script, or to run a command that is not supported by the module right after the container is started.

Ready Commands
Since testcontainers-go  v0.28.0
Testcontainers exposes the WithAfterReadyCommand(e ...Executable) option to run arbitrary commands in the container right after it's ready, which happens when the defined wait strategies have finished with success.

Info

To better understand how this feature works, please read the Create containers: Lifecycle Hooks documentation.

It leverages the Executable interface to represent the command and positional arguments to be executed in the container.

You could use this feature to run a custom script, or to run a command that is not supported by the module right after the container is ready.

WithNetwork
Since testcontainers-go  v0.27.0
By default, the container is started in the default Docker network. If you want to use an already existing Docker network you created in your code, you can use the network.WithNetwork(aliases []string, nw *testcontainers.DockerNetwork) option, which receives an alias as parameter and your network, attaching the container to it, and setting the network alias for that network.

In the case you need to retrieve the network name, you can simply read it from the struct's Name field. E.g. nw.Name.

Warning

This option is not checking whether the network exists or not. If you use a network that doesn't exist, the container will start in the default Docker network, as in the default behavior.

WithNewNetwork
Since testcontainers-go  v0.27.0
If you want to attach your containers to a throw-away network, you can use the network.WithNewNetwork(ctx context.Context, aliases []string, opts ...network.NetworkCustomizer) option, which receives an alias as parameter, creating the new network with a random name, attaching the container to it, and setting the network alias for that network.

In the case you need to retrieve the network name, you can use the Networks(ctx) method of the Container interface, right after it's running, which returns a slice of strings with the names of the networks where the container is attached.

Docker type modifiers
If you need an advanced configuration for the container, you can leverage the following Docker type modifiers:

testcontainers.WithConfigModifier
testcontainers.WithHostConfigModifier
testcontainers.WithEndpointSettingsModifier
Please read the Create containers: Advanced Settings documentation for more information.

Customising the ContainerRequest
This option will merge the customized request into the module's own ContainerRequest.

```go
container, err := Run(ctx, "postgres:13-alpine",
    /* Other module options */
    testcontainers.CustomizeRequest(testcontainers.GenericContainerRequest{
        ContainerRequest: testcontainers.ContainerRequest{
            Cmd: []string{"-c", "log_statement=all"},
        },
    }),
)
```

The above example is updating the predefined command of the image, appending them to the module's command.

Info

This can't be used to replace the command, only to append options.

Container Methods
The Grafana LGTM container exposes the following methods:

Info

All the endpoint methods return their endpoints in the format <host>:<port>, so please use them accordingly to configure your client.

Grafana Endpoint
Since testcontainers-go  v0.33.0
The HttpEndpoint(ctx) method returns the HTTP endpoint to connect to Grafana, using the default 3000 port. The same method with the Must prefix returns just the endpoing, and panics if an error occurs.

Loki Endpoint
Since testcontainers-go  v0.33.0
The LokiEndpoint(ctx) method returns the HTTP endpoint to connect to Loki, using the default 3100 port. The same method with the Must prefix returns just the endpoing, and panics if an error occurs.

Tempo Endpoint
Since testcontainers-go  v0.33.0
The TempoEndpoint(ctx) method returns the HTTP endpoint to connect to Tempo, using the default 3200 port. The same method with the Must prefix returns just the endpoing, and panics if an error occurs.

Otel HTTP Endpoint
Since testcontainers-go  v0.33.0
The OtelHTTPEndpoint(ctx) method returns the endpoint to connect to Otel using HTTP, using the default 4318 port. The same method with the Must prefix returns just the endpoing, and panics if an error occurs.

Otel gRPC Endpoint
Since testcontainers-go  v0.33.0
The OtelGRPCEndpoint(ctx) method returns the endpoint to connect to Otel using gRPC, using the default 4317 port. The same method with the Must prefix returns just the endpoing, and panics if an error occurs.

Prometheus Endpoint
Since testcontainers-go  v0.33.0
The PrometheusHttpEndpoint(ctx) method returns the endpoint to connect to Prometheus, using the default 9090 port. The same method with the Must prefix returns just the endpoing, and panics if an error occurs.

Examples
Traces, Logs and Prometheus metrics for a simple Go process
In this example, a simple application is created to generate traces, logs, and Prometheus metrics. The application sends data to Grafana LGTM, and the Otel SDK is used to send the data. The example demonstrates how to set up the Otel SDK and run the Grafana LGTM module, configuring the Otel library to send data to Grafana LGTM thanks to the endpoints provided by the Grafana LGTM container.


App sending Otel data

```go
const schemaName = "https://github.com/grafana/docker-otel-lgtm"

var (
    tracer = otel.Tracer(schemaName)
    logger = otelslog.NewLogger(schemaName)
    meter  = otel.Meter(schemaName)
)

func rolldice(ctx context.Context) {
    ctx, span := tracer.Start(ctx, "roll")
    defer span.End()

    // 20-sided dice
    roll := 1 + rand.Intn(20)
    logger.InfoContext(ctx, fmt.Sprintf("Rolled a dice: %d\n", roll), slog.Int("result", roll))

    opt := metricsapi.WithAttributes(
        attribute.Key("sides").Int(roll),
    )

    // This is the equivalent of prometheus.NewCounterVec
    counter, err := meter.Int64Counter("rolldice-counter", metricsapi.WithDescription("a 20-sided dice"))
    if err != nil {
        golog.Fatal(err)
    }
    counter.Add(ctx, int64(roll), opt)
}
```

Setup Otel SDK
```go
var shutdownFuncs []func(context.Context) error

// shutdown calls cleanup functions registered via shutdownFuncs.
// The errors from the calls are joined.
// Each registered cleanup will be invoked once.
shutdown = func(ctx context.Context) error {
    var err error
    for _, fn := range shutdownFuncs {
        err = errors.Join(err, fn(ctx))
    }
    shutdownFuncs = nil
    fmt.Println("shutdown errors:", err)
    return err
}

// handleErr calls shutdown for cleanup and makes sure that all errors are returned.
handleErr := func(inErr error) {
    err = errors.Join(inErr, shutdown(ctx))
}

prop := propagation.NewCompositeTextMapPropagator(
    propagation.TraceContext{},
    propagation.Baggage{},
)
otel.SetTextMapPropagator(prop)

otlpHttpEndpoint := ctr.MustOtlpHttpEndpoint(ctx)

traceExporter, err := otlptrace.New(ctx,
    otlptracehttp.NewClient(
        // adding schema to avoid this error:
        // 2024/07/19 13:16:30 internal_logging.go:50: "msg"="otlptrace: parse endpoint url" "error"="parse \"127.0.0.1:33007\": first path segment in URL cannot contain colon" "url"="127.0.0.1:33007"
        // it does not happen with the logs and metrics exporters
        otlptracehttp.WithEndpointURL("http://"+otlpHttpEndpoint),
        otlptracehttp.WithInsecure(),
    ),
)
if err != nil {
    return nil, err
}

tracerProvider := trace.NewTracerProvider(trace.WithBatcher(traceExporter))
if err != nil {
    handleErr(err)
    return
}
shutdownFuncs = append(shutdownFuncs, tracerProvider.Shutdown)
otel.SetTracerProvider(tracerProvider)

metricExporter, err := otlpmetrichttp.New(ctx,
    otlpmetrichttp.WithInsecure(),
    otlpmetrichttp.WithEndpoint(otlpHttpEndpoint),
)
if err != nil {
    return nil, err
}

// The exporter embeds a default OpenTelemetry Reader and
// implements prometheus.Collector, allowing it to be used as
// both a Reader and Collector.
prometheusExporter, err := prometheus.New()
if err != nil {
    return nil, err
}

meterProvider := metric.NewMeterProvider(
    metric.WithReader(metric.NewPeriodicReader(metricExporter)),
    metric.WithReader(prometheusExporter),
)
if err != nil {
    handleErr(err)
    return
}
shutdownFuncs = append(shutdownFuncs, meterProvider.Shutdown)
otel.SetMeterProvider(meterProvider)

logExporter, err := otlploghttp.New(ctx,
    otlploghttp.WithInsecure(),
    otlploghttp.WithEndpoint(otlpHttpEndpoint),
)
if err != nil {
    return nil, err
}

loggerProvider := log.NewLoggerProvider(log.WithProcessor(log.NewBatchProcessor(logExporter)))
if err != nil {
    handleErr(err)
    return
}
shutdownFuncs = append(shutdownFuncs, loggerProvider.Shutdown)
global.SetLoggerProvider(loggerProvider)

err = runtime.Start(runtime.WithMinimumReadMemStatsInterval(time.Second))
if err != nil {
    logger.ErrorContext(ctx, "otel runtime instrumentation failed:", err) // nolint:all // this is a pattern in the OpenTelemetry Go SDK
}

return
```

Run the Grafana LGTM container
```go
ctx := context.Background()

ctr, err := grafanalgtm.Run(ctx, "grafana/otel-lgtm:0.6.0", grafanalgtm.WithAdminCredentials("admin", "123456789"))
if err != nil {
    golog.Fatalf("failed to start Grafana LGTM container: %s", err)
}
defer func() {
    if err := ctr.Terminate(ctx); err != nil {
        golog.Fatalf("failed to terminate Grafana LGTM container: %s", err)
    }
}()

// Set up OpenTelemetry.
otelShutdown, err := setupOTelSDK(ctx, ctr)
if err != nil {
    return
}
// Handle shutdown properly so nothing leaks.
defer func() {
    err = errors.Join(err, otelShutdown(context.Background()))
}()

// roll dice 10000 times, concurrently
max := 10_000
wg := sync.WaitGroup{}
for i := 0; i < max; i++ {
    wg.Add(1)

    go func() {
        defer wg.Done()
        rolldice(ctx)
    }()
}

wg.Wait()

// Output:
// shutdown errors: <nil>
```
